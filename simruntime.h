/* Header file for the the simulation run-time environment.			*/
/* The functions in this file simulate the remainig system			*/
/* (covering hardware-related and software components)				*/
/* !!!!!!!!!! Do not edit this file !!!!!!!!!!	*/

#ifndef __SIMRT__
#define __SIMRT__

// Constant value for time consumed by scheduler and dispatcher
#define SCHEDULING_DURATION 5       // Time to make the scheduling decision and context switch
#define LOADING_DURATION 0           // Time to set up a Process to "init"
#define POLLING_INTERVAL 1          // interval for checking stimulus for new processes when in IDLE

// Mean values between IO events by process type
#define IO_MEAN_OS			40
#define IO_MEAN_INTERACTIVE	5
#define IO_MEAN_BATCH		200
#define IO_MEAN_BACKGROUND	30
#define IO_MEAN_FOREGROUND	15
#define IO_MEAN_DEFAULT		0

// mean value for duration of IO
#define IO_MEAN_DURATION	10

extern Boolean sim_complete;		// end of OS indicator
extern Boolean stimulusCompleted;	// Flag indicating if the stimulus has been completed 
/* ---------------------------------------------------------------- */
/* Include required external definitions */
#include <math.h>
#include "bs_types.h"
#include "globals.h"
#include "scheduler.h"

int sim_initSim(void);
/* initialise the simulation, not part of the os					*/

int sim_closeSim(void);
/* Exit from the simulation environment regularly					*/

Boolean sim_noMoreProcesses(void);
/* returns TRUE when simulation has no more processes to run		*/
/* i.e. when the stimulus-file was complete read and the buffered   */
/* candidate process was used						 				*/

Boolean sim_getProcessParameters(pid_t pid); 
/* initialises the PCB in the process table of the process with		*/
/* the given pid with the parameters read from stimulus file.		*/
/* Only parameters given by the stimulis file are changed			*/
/* retuns FALSE on error and TRUE on success						*/

unsigned int sim_setIOBlockTime(void); 
/* returns the duration of a simulated IO-operation					*/

schedulingEvent_t sim_check4UnblockedOrNew(pid_t* pPID);
/* checks the simulation environment for processes that have become */
/* ready since the last scheduling event processed by the 			*/
/* simulation or the dispatcher.									*/
/* Returns what happened: a process was unblocked or a new process	*/
/* was initialised. Either event type results in a process that is	*/
/* now ready and must be processed accordingly.						*/
/* Returns 'none' if nothing happened in the relevant interval		*/
/* The paramater must point to a location for the pid of the		*/
/* process that became ready. The value is changed to 0 if no event */
/* occurred and to the pid of the process causing the event			*/
/* otherwise.														*/
/* No data structures of the OS are changed, the OS must deal with	*/
/* the returned informnation appropriately, e.g. update blocked-    */
/* and ready-list													*/
/* USAGE:															*/
/* The function must be called in multiprogramming-systems after a	*/
/* process has left the CPU and	thus the system time was advanced.	*/









#endif /* __SIMRT__ */